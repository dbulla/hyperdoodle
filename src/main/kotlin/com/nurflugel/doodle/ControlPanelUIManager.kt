package com.nurflugel.doodle

import java.awt.BorderLayout
import java.awt.GridBagConstraints
import java.awt.GridBagLayout
import java.awt.GridLayout
import java.awt.event.MouseWheelEvent
import java.awt.print.PrinterJob
import javax.swing.*
import javax.swing.border.EtchedBorder
import javax.swing.event.ChangeEvent


/**
 * @author Douglas Bullard
 */
class ControlPanelUIManager(doodleFrame: DoodleFrame) : JPanel(BorderLayout()) {
    private lateinit var doodleFrame: DoodleFrame
    private  var useUIManager = false
    private lateinit var addLocusPointsRadioButton: JRadioButton
    private lateinit var addMoveRemoteButtonGroup: ButtonGroup
    private lateinit var fixedWanderButtonGroup: ButtonGroup
    private lateinit var clearButton: JButton
    private lateinit var numberOfEdgePointsLabel: JLabel
    private lateinit var fixedWanderModePanel: JPanel
    private lateinit var moveLocusPointsRadioButton: JRadioButton
    private lateinit var numPointsSpinner: JSpinner
    private lateinit var quitButton: JButton
    private lateinit var printButton: JButton
    private lateinit var radioButtonPanel: JPanel
    private lateinit var removeLocusPointsRadioButton: JRadioButton
    private lateinit var fixedModeRadioButton: JRadioButton
    private lateinit var wanderModeRadioButton: JRadioButton
    var isPrinting: Boolean = false
        private set
    private lateinit var contentPanel: JPanel
    private lateinit var buttonPanel: JPanel

    /**
     * Creates new form ControlPanel
     */
    init {
        initComponents()
        /** Set content pane  */
        add(contentPanel)
        println("ControlPanelUIManager.ControlPanelUIManager")
        this.doodleFrame = doodleFrame
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private fun initComponents() {    //GEN-BEGIN:initComponents
        addMoveRemoteButtonGroup = ButtonGroup()
        fixedWanderButtonGroup = ButtonGroup()

        if (!useUIManager) {
            var gridBagConstraints: GridBagConstraints


            if (true) {
                clearButton = JButton("Clear")
                printButton = JButton("Print")
                quitButton = JButton("Quit")
                layout = GridBagLayout()

                clearButton.text = "Clear"
                printButton.text = "Print"
                quitButton.text = "Quit"
                radioButtonPanel = JPanel()
                fixedWanderModePanel = JPanel()
                addLocusPointsRadioButton = JRadioButton("Add Points")
                moveLocusPointsRadioButton = JRadioButton("Move Points")
                removeLocusPointsRadioButton = JRadioButton("Remove Points")
                wanderModeRadioButton = JRadioButton("Wander Mode")
                fixedModeRadioButton = JRadioButton("Fixed Mode")
                val spinnerModel:SpinnerModel = SpinnerNumberModel(10,2,40,1)
                numPointsSpinner = JSpinner(spinnerModel)
                numberOfEdgePointsLabel = JLabel()
                contentPanel = JPanel()

                gridBagConstraints = GridBagConstraints()
                gridBagConstraints.gridx = 2
                gridBagConstraints.gridy = 1
                gridBagConstraints.fill = GridBagConstraints.HORIZONTAL
                add(clearButton, gridBagConstraints)

                gridBagConstraints = GridBagConstraints()
                gridBagConstraints.gridx = 2
                gridBagConstraints.gridy = 2
                gridBagConstraints.fill = GridBagConstraints.HORIZONTAL
                add(printButton, gridBagConstraints)

                gridBagConstraints = GridBagConstraints()
                gridBagConstraints.gridx = 2
                gridBagConstraints.gridy = 3
                gridBagConstraints.fill = GridBagConstraints.HORIZONTAL
                add(quitButton, gridBagConstraints)

                radioButtonPanel.layout = GridLayout(3, 1)

                radioButtonPanel.border = EtchedBorder()
                addLocusPointsRadioButton.isSelected = true
                addLocusPointsRadioButton.text = "Add New Locus Points"
                moveLocusPointsRadioButton.text = "Move Locus Points"

                removeLocusPointsRadioButton.text = "Remove Locus Points"

                radioButtonPanel.add(addLocusPointsRadioButton)
                radioButtonPanel.add(moveLocusPointsRadioButton)
                radioButtonPanel.add(removeLocusPointsRadioButton)

                gridBagConstraints = GridBagConstraints()
                gridBagConstraints.gridx = 0
                gridBagConstraints.gridy = 0
                gridBagConstraints.gridwidth = 2
                gridBagConstraints.gridheight = 2
                add(radioButtonPanel, gridBagConstraints)

                fixedWanderModePanel.layout = BoxLayout(fixedWanderModePanel, BoxLayout.Y_AXIS)
                fixedWanderModePanel.border = EtchedBorder()

                wanderModeRadioButton.text = "Wander mode"
                fixedModeRadioButton.text = "Fixed mode"

                fixedModeRadioButton.isSelected = true

                fixedWanderModePanel.add(wanderModeRadioButton)
                fixedWanderModePanel.add(fixedModeRadioButton)

                gridBagConstraints = GridBagConstraints()
                gridBagConstraints.gridx = 2
                gridBagConstraints.gridy = 0
                gridBagConstraints.anchor = GridBagConstraints.NORTH
                add(fixedWanderModePanel, gridBagConstraints)

                numPointsSpinner.toolTipText = "Controls how many points per side"

                gridBagConstraints = GridBagConstraints()
                gridBagConstraints.gridx = 1
                gridBagConstraints.gridy = 2
                gridBagConstraints.fill = GridBagConstraints.HORIZONTAL
                gridBagConstraints.ipadx = 12
                add(numPointsSpinner, gridBagConstraints)

                numberOfEdgePointsLabel.text = "Number of Edge Points: "
                gridBagConstraints = GridBagConstraints()
                gridBagConstraints.gridx = 0
                gridBagConstraints.gridy = 2
                add(numberOfEdgePointsLabel, gridBagConstraints)
            }
        }
        addMoveRemoteButtonGroup.add(addLocusPointsRadioButton)
        addMoveRemoteButtonGroup.add(moveLocusPointsRadioButton)
        addMoveRemoteButtonGroup.add(removeLocusPointsRadioButton)

        fixedWanderButtonGroup.add(fixedModeRadioButton)
        fixedWanderButtonGroup.add(wanderModeRadioButton)

        clearButton.addActionListener { clearButtonActionPerformed() }
        quitButton.addActionListener { quitButtonActionPerformed() }
        moveLocusPointsRadioButton.addActionListener { moveLocusPointsRadioButtonActionPerformed() }

        removeLocusPointsRadioButton.addActionListener { removeLocusPointsRadioButtonActionPerformed() }
        wanderModeRadioButton.addActionListener { wanderModeRadioButtonActionPerformed() }
        fixedModeRadioButton.addActionListener { fixedModeRadioButtonActionPerformed() }
        numPointsSpinner.addChangeListener { numPointsSpinnerStateChanged(it) }
        numPointsSpinner.addMouseWheelListener { numPointsSpinnerMouseWheelMoved(it) }
        printButton.addActionListener { e ->
            if (e.source is JButton) {
                val printJob = PrinterJob.getPrinterJob()

                printJob.setPrintable(doodleFrame.getDoodlePanel())

                if (printJob.printDialog()) {
                    try {
                        isPrinting = true
                        printJob.print()
                        isPrinting = false
                    } catch (ex: Exception) {
                        ex.printStackTrace()
                    }
                }
            }
        }
    }

    //GEN-END:initComponents
    private fun numPointsSpinnerMouseWheelMoved(e: MouseWheelEvent) {    //GEN-FIRST:event_numPointsSpinnerMouseWheelMoved

        val scrollAmount = e.scrollAmount
        val scrollType = e.scrollType

        println("scrollType = $scrollType")

        val unitsToScroll = e.unitsToScroll

        println("unitsToScroll = $unitsToScroll")

        val wheelRotation = e.wheelRotation
        val value = (numPointsSpinner.value as Int)

        println("wheelRotation = " + (value + wheelRotation))
        println("scrollAmount = $scrollAmount")
        println("value = $value")
        if (value in 2..100) {
            numPointsSpinner.value = value + wheelRotation
            doodleFrame.setNumPointsPerSide(wheelRotation)
        }
    }

    //GEN-LAST:event_numPointsSpinnerMouseWheelMoved
    private fun numPointsSpinnerStateChanged(evt: ChangeEvent) {    //GEN-FIRST:event_numPointsSpinnerStateChanged

        if (evt.source == numPointsSpinner) {
            doodleFrame.setNumPointsPerSide(numPointsSpinner.model.value.toString().toInt())
        }
    }

    //GEN-LAST:event_numPointsSpinnerStateChanged
    private fun quitButtonActionPerformed() {    //GEN-FIRST:event_quitButtonActionPerformed
        System.exit(0)
    }

    //GEN-LAST:event_quitButtonActionPerformed
    private fun clearButtonActionPerformed() {    //GEN-FIRST:event_clearButtonActionPerformed
        clear()
    }

    private fun clear() {
        doodleFrame.clear()
    }

    private fun wanderModeRadioButtonActionPerformed() {
        doodleFrame.animate()
    }

    private fun fixedModeRadioButtonActionPerformed() {
        doodleFrame.stop()
    }

    val isWandering: Boolean
        get() = wanderModeRadioButton.isSelected

    private fun removeLocusPointsRadioButtonActionPerformed() {
        // Add your handling code here:
    }

    private fun moveLocusPointsRadioButtonActionPerformed() {
        // Add your handling code here:
    }

    val isAddLocusMode: Boolean
        get() = addLocusPointsRadioButton.isSelected

    val isMoveLocusMode: Boolean
        get() = moveLocusPointsRadioButton.isSelected

    val isRemoveLocusMode: Boolean
        get() = removeLocusPointsRadioButton.isSelected // End of variables declaration//GEN-END:variables
}

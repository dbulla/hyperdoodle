package com.nurflugel.doodle

import java.awt.BorderLayout
import java.awt.GridBagConstraints
import java.awt.GridBagLayout
import java.awt.GridLayout
import java.awt.event.MouseWheelEvent
import java.awt.print.PrinterJob
import javax.swing.*
import javax.swing.border.EtchedBorder


private const val MIN_POINTS_VALUE = 2
private const val MAX_POINTS_VALUE = 200
private const val INITIAL_POINTS_VALUE = 40

/**
 * @author Douglas Bullard
 */
class ControlPanelUIManager(doodleFrame: DoodleFrame) : JPanel(BorderLayout()) {
    private var doodleFrame: DoodleFrame
    private  var useUIManager = false
    private lateinit var addLocusPointsRadioButton: JRadioButton
    private lateinit var addMoveRemoteButtonGroup: ButtonGroup
    private lateinit var fixedWanderButtonGroup: ButtonGroup
    private lateinit var clearButton: JButton
    private lateinit var numberOfEdgePointsLabel: JLabel
    private lateinit var fixedWanderModePanel: JPanel
    private lateinit var moveLocusPointsRadioButton: JRadioButton
    private lateinit var numPointsSpinner: JSpinner
    private lateinit var quitButton: JButton
    private lateinit var printButton: JButton
    private lateinit var radioButtonPanel: JPanel
    private lateinit var removeLocusPointsRadioButton: JRadioButton
    private lateinit var fixedModeRadioButton: JRadioButton
    private lateinit var wanderModeRadioButton: JRadioButton
    var isPrinting: Boolean = false
        private set
    private lateinit var contentPanel: JPanel
    private lateinit var buttonPanel: JPanel

    /**
     * Creates new form ControlPanel
     */
    init {
        initComponents()
        /** Set content pane  */
        add(contentPanel)
        this.doodleFrame = doodleFrame
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private fun initComponents() {    //GEN-BEGIN:initComponents
        addMoveRemoteButtonGroup = ButtonGroup()
        fixedWanderButtonGroup = ButtonGroup()

        if (!useUIManager) {

            clearButton = JButton("Clear")
            printButton = JButton("Print")
            quitButton = JButton("Quit")
            layout = GridBagLayout()

            clearButton.text = "Clear"
            printButton.text = "Print"
            quitButton.text = "Quit"
            radioButtonPanel = JPanel()
            fixedWanderModePanel = JPanel()
            addLocusPointsRadioButton = JRadioButton("Add Points")
            moveLocusPointsRadioButton = JRadioButton("Move Points")
            removeLocusPointsRadioButton = JRadioButton("Remove Points")
            wanderModeRadioButton = JRadioButton("Wander Mode")
            fixedModeRadioButton = JRadioButton("Fixed Mode")
            numPointsSpinner = JSpinner(SpinnerNumberModel(INITIAL_POINTS_VALUE, MIN_POINTS_VALUE, MAX_POINTS_VALUE, 1))
            numberOfEdgePointsLabel = JLabel()
            contentPanel = JPanel()

            var gridBagConstraints = GridBagConstraints()
            gridBagConstraints.gridx = MIN_POINTS_VALUE
            gridBagConstraints.gridy = 1
            gridBagConstraints.fill = GridBagConstraints.HORIZONTAL
            add(clearButton, gridBagConstraints)

            gridBagConstraints = GridBagConstraints()
            gridBagConstraints.gridx = MIN_POINTS_VALUE
            gridBagConstraints.gridy = MIN_POINTS_VALUE
            gridBagConstraints.fill = GridBagConstraints.HORIZONTAL
            add(printButton, gridBagConstraints)

            gridBagConstraints = GridBagConstraints()
            gridBagConstraints.gridx = MIN_POINTS_VALUE
            gridBagConstraints.gridy = 3
            gridBagConstraints.fill = GridBagConstraints.HORIZONTAL
            add(quitButton, gridBagConstraints)

            radioButtonPanel.layout = GridLayout(3, 1)

            radioButtonPanel.border = EtchedBorder()
            addLocusPointsRadioButton.isSelected = true
            addLocusPointsRadioButton.text = "Add New Locus Points"
            moveLocusPointsRadioButton.text = "Move Locus Points"
            removeLocusPointsRadioButton.text = "Remove Locus Points"

            radioButtonPanel.add(addLocusPointsRadioButton)
            radioButtonPanel.add(moveLocusPointsRadioButton)
            radioButtonPanel.add(removeLocusPointsRadioButton)

            gridBagConstraints = GridBagConstraints()
            gridBagConstraints.gridx = 0
            gridBagConstraints.gridy = 0
            gridBagConstraints.gridwidth = MIN_POINTS_VALUE
            gridBagConstraints.gridheight = MIN_POINTS_VALUE
            add(radioButtonPanel, gridBagConstraints)

            fixedWanderModePanel.layout = BoxLayout(fixedWanderModePanel, BoxLayout.Y_AXIS)
            fixedWanderModePanel.border = EtchedBorder()

            wanderModeRadioButton.text = "Wander mode"
            fixedModeRadioButton.text = "Fixed mode"

            fixedModeRadioButton.isSelected = true

            fixedWanderModePanel.add(fixedModeRadioButton)
            fixedWanderModePanel.add(wanderModeRadioButton)

            gridBagConstraints = GridBagConstraints()
            gridBagConstraints.gridx = MIN_POINTS_VALUE
            gridBagConstraints.gridy = 0
            gridBagConstraints.anchor = GridBagConstraints.NORTH
            add(fixedWanderModePanel, gridBagConstraints)

            numPointsSpinner.toolTipText = "Controls how many points per side"

            gridBagConstraints = GridBagConstraints()
            gridBagConstraints.gridx = 1
            gridBagConstraints.gridy = MIN_POINTS_VALUE
            gridBagConstraints.fill = GridBagConstraints.HORIZONTAL
            gridBagConstraints.ipadx = 12
            add(numPointsSpinner, gridBagConstraints)

            numberOfEdgePointsLabel.text = "Number of Edge Points: "
            gridBagConstraints = GridBagConstraints()
            gridBagConstraints.gridx = 0
            gridBagConstraints.gridy = MIN_POINTS_VALUE
            add(numberOfEdgePointsLabel, gridBagConstraints)
        }
        addMoveRemoteButtonGroup.add(addLocusPointsRadioButton)
        addMoveRemoteButtonGroup.add(moveLocusPointsRadioButton)
        addMoveRemoteButtonGroup.add(removeLocusPointsRadioButton)

        fixedWanderButtonGroup.add(fixedModeRadioButton)
        fixedWanderButtonGroup.add(wanderModeRadioButton)

        clearButton.addActionListener { doodleFrame.clear() }
        quitButton.addActionListener { System.exit(0) }
//        moveLocusPointsRadioButton.addActionListener { moveLocusPointsRadioButtonActionPerformed() }
//        removeLocusPointsRadioButton.addActionListener { removeLocusPointsRadioButtonActionPerformed() }
        wanderModeRadioButton.addActionListener { doodleFrame.animate() }
        fixedModeRadioButton.addActionListener { doodleFrame.stop() }
        numPointsSpinner.addChangeListener { doodleFrame.setNumPointsPerSide(numPointsSpinner.model.value.toString().toInt()) }
        numPointsSpinner.addMouseWheelListener { numPointsSpinnerMouseWheelMoved(it) }
        printButton.addActionListener { printScreen() }
    }

    private fun printScreen() {
        val printJob = PrinterJob.getPrinterJob()

        printJob.setPrintable(doodleFrame.getDoodlePanel())

        if (printJob.printDialog()) {
            try {
                isPrinting = true
                printJob.print()
                isPrinting = false
            } catch (ex: Exception) {
                ex.printStackTrace()
            }
        }
    }

    private fun numPointsSpinnerMouseWheelMoved(e: MouseWheelEvent) {

        val scrollAmount = e.scrollAmount
        val wheelRotation = e.wheelRotation
        val value = (numPointsSpinner.value as Int)

        if (value in MIN_POINTS_VALUE..MAX_POINTS_VALUE) {
            numPointsSpinner.value = value + wheelRotation
            doodleFrame.setNumPointsPerSide(wheelRotation)
        }
    }

    val isWandering: Boolean
        get() = wanderModeRadioButton.isSelected

    val isAddLocusMode: Boolean
        get() = addLocusPointsRadioButton.isSelected

    val isMoveLocusMode: Boolean
        get() = moveLocusPointsRadioButton.isSelected

    val isRemoveLocusMode: Boolean
        get() = removeLocusPointsRadioButton.isSelected // End of variables declaration//GEN-END:variables
}
